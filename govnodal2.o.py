import os
import tkinter as tk
from tkinter import ttk, messagebox
import sys
import winshell
from win32com.client import Dispatch
from PIL import Image, ImageTk
import ctypes
import time
import threading
import random

class GOVNOOSInstaller:
    def __init__(self, root):
        self.root = root
        self.root.title("GOVNO OS Installer")
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg='black')
        self.installation_cancelled = False
        
        self.show_installation()
        
    def show_installation(self):
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π canvas –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.canvas = tk.Canvas(self.root, bg='black', highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.installation_thread = threading.Thread(target=self.installation_process)
        self.installation_thread.daemon = True
        self.installation_thread.start()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã (—Å–∫—Ä—ã—Ç—É—é)
        self.cancel_btn = tk.Button(self.root, text="–ù–∞–∂–º–∏—Ç–µ CAPSLOCK –¥–ª—è –æ—Ç–º–µ–Ω—ã", 
                                  font=('Segoe UI', 12), bg='red', fg='white',
                                  command=self.cancel_installation)
        self.cancel_btn.place(relx=0.5, rely=0.9, anchor=tk.CENTER)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º CapsLock
        self.root.bind('<KeyPress-Caps_Lock>', lambda e: self.cancel_installation())
        self.root.focus_set()
        
    def installation_process(self):
        try:
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            self.show_stage("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GOVNO OS", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
            time.sleep(2)
            
            if self.installation_cancelled: return
            
            # –≠—Ç–∞–ø 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
            self.show_stage("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞", "–û—á–∏—Å—Ç–∫–∞ GOVNO_DISK...")
            self.show_disk_animation()
            time.sleep(3)
            
            if self.installation_cancelled: return
            
            # –≠—Ç–∞–ø 3: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            self.show_stage("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ GOVNO OS", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            self.show_file_copy_animation()
            time.sleep(4)
            
            if self.installation_cancelled: return
            
            # –≠—Ç–∞–ø 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            self.show_stage("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            self.show_progress_animation()
            time.sleep(3)
            
            if self.installation_cancelled: return
            
            # –≠—Ç–∞–ø 5: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
            self.show_stage("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ...")
            time.sleep(2)
            
            if self.installation_cancelled: return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            self.show_reboot_screen()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            
    def show_stage(self, title, description):
        self.canvas.delete("all")
        
        # –õ–æ–≥–æ—Ç–∏–ø GOVNO OS
        self.canvas.create_text(960, 200, text="üí©", font=('Arial', 80), fill='#00ff00', tags="logo")
        self.canvas.create_text(960, 300, text="GOVNO OS", font=('Segoe UI', 36, 'bold'), fill='white', tags="title")
        self.canvas.create_text(960, 350, text=title, font=('Segoe UI', 18), fill='#cccccc', tags="subtitle")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞
        self.canvas.create_text(960, 450, text=description, font=('Segoe UI', 14), fill='#888888', tags="desc")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.canvas.create_rectangle(560, 550, 1360, 580, outline='#333333', fill='#222222', tags="progress_bg")
        
        self.root.update()
        
    def show_disk_animation(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
        disk_info = [
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ C:...",
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ GOVNO_DISK...",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–¥–µ–ª–æ–≤...",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã GOVNO_FS..."
        ]
        
        for i, info in enumerate(disk_info):
            if self.installation_cancelled: return
            
            self.canvas.delete("disk_info")
            self.canvas.create_text(960, 500, text=info, font=('Segoe UI', 12), fill='#00ff00', tags="disk_info")
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_width = 800 * (i + 1) / len(disk_info)
            self.canvas.create_rectangle(560, 550, 560 + progress_width, 580, fill='#00ff00', outline='', tags="progress")
            
            self.root.update()
            time.sleep(0.8)
            
    def show_file_copy_animation(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        files = [
            "kernel.govno",
            "system32/govno.dll",
            "drivers/ponos.sys",
            "bin/shitutils.exe",
            "lib/govnolib.so",
            "config/govnoconf.cfg"
        ]
        
        for i, file in enumerate(files):
            if self.installation_cancelled: return
            
            self.canvas.delete("file_info")
            status = f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {file}"
            self.canvas.create_text(960, 480, text=status, font=('Consolas', 11), fill='#00ff00', tags="file_info")
            
            # –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_width = 800 * (i + 1) / len(files)
            self.canvas.delete("progress")
            self.canvas.create_rectangle(560, 550, 560 + progress_width, 580, fill='#00ff00', outline='', tags="progress")
            
            # –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            speed = random.randint(50, 200)
            speed_text = f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed} MB/s"
            self.canvas.create_text(960, 520, text=speed_text, font=('Consolas', 10), fill='#888888', tags="speed")
            
            self.root.update()
            time.sleep(0.5)
            
    def show_progress_animation(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        tasks = [
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ GOVNO...",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞...",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...",
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
            "–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        ]
        
        for i, task in enumerate(tasks):
            if self.installation_cancelled: return
            
            self.canvas.delete("task_info")
            self.canvas.create_text(960, 480, text=task, font=('Segoe UI', 12), fill='#00ff00', tags="task_info")
            
            progress_width = 800 * (i + 1) / len(tasks)
            self.canvas.delete("progress")
            self.canvas.create_rectangle(560, 550, 560 + progress_width, 580, fill='#00ff00', outline='', tags="progress")
            
            self.root.update()
            time.sleep(0.7)
            
    def show_reboot_screen(self):
        self.canvas.delete("all")
        
        # –≠–∫—Ä–∞–Ω –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        self.canvas.create_text(960, 400, text="GOVNO OS", font=('Segoe UI', 48, 'bold'), fill='#00ff00')
        self.canvas.create_text(960, 480, text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", font=('Segoe UI', 18), fill='white')
        self.canvas.create_text(960, 520, text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã...", font=('Segoe UI', 14), fill='#cccccc')
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        for i in range(10):
            if self.installation_cancelled: return
            
            dots = "." * (i % 4)
            self.canvas.delete("loading")
            self.canvas.create_text(960, 560, text=f"–ó–∞–≥—Ä—É–∑–∫–∞{dots}", font=('Consolas', 12), fill='#00ff00', tags="loading")
            self.root.update()
            time.sleep(0.5)
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º GOVNO OS Desktop
        if not self.installation_cancelled:
            self.root.after(100, self.start_govno_os)
            
    def start_govno_os(self):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º GOVNO OS
        self.root.destroy()
        govno_root = tk.Tk()
        GOVNOOSDesktop(govno_root)
        govno_root.mainloop()
        
    def cancel_installation(self):
        self.installation_cancelled = True
        self.canvas.delete("all")
        self.canvas.create_text(960, 400, text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", font=('Segoe UI', 24), fill='red')
        self.canvas.create_text(960, 450, text="–í–æ–∑–≤—Ä–∞—Ç –∫ Windows...", font=('Segoe UI', 14), fill='white')
        self.root.update()
        time.sleep(2)
        self.root.destroy()

class GOVNOOSDesktop:
    def __init__(self, root):
        self.root = root
        self.root.title("GOVNO OS")
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg='#1a1a1a')
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º CapsLock –¥–ª—è –≤—ã—Ö–æ–¥–∞
        self.root.bind('<KeyPress-Caps_Lock>', lambda e: self.exit_govno_os())
        self.root.focus_set()
        
        self.create_desktop()
        
    def create_desktop(self):
        # –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—ë)
        self.bg_label = tk.Label(self.root, bg='#1a1a1a')
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        
        # –ò–∫–æ–Ω–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
        desktop_icons = [
            ("üí©", "–ú–æ–π GOVNO", 100, 100),
            ("üóëÔ∏è", "–ö–æ—Ä–∑–∏–Ω–∞", 100, 200),
            ("üîß", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", 100, 300),
            ("üåê", "GOVNO Browser", 100, 400),
            ("üéÆ", "–ò–≥—Ä—ã", 100, 500)
        ]
        
        for icon, text, x, y in desktop_icons:
            icon_frame = tk.Frame(self.root, bg='#1a1a1a')
            icon_frame.place(x=x, y=y)
            
            icon_label = tk.Label(icon_frame, text=icon, font=('Arial', 24), 
                                bg='#1a1a1a', fg='white', cursor='hand2')
            icon_label.pack()
            
            text_label = tk.Label(icon_frame, text=text, font=('Segoe UI', 9), 
                                bg='#1a1a1a', fg='white', cursor='hand2')
            text_label.pack()
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–∫–∏
            icon_label.bind('<Button-1>', lambda e, t=text: self.icon_click(t))
            text_label.bind('<Button-1>', lambda e, t=text: self.icon_click(t))
        
        # –ü–∞–Ω–µ–ª—å –∑–∞–¥–∞—á
        taskbar = tk.Frame(self.root, bg='#2d2d2d', height=40)
        taskbar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –ö–Ω–æ–ø–∫–∞ –ü—É—Å–∫ GOVNO OS
        start_btn = tk.Label(taskbar, text="üí© –ü–£–°–ö", font=('Segoe UI', 10, 'bold'), 
                           bg='#0078d4', fg='white', cursor='hand2', padx=15, pady=8)
        start_btn.pack(side=tk.LEFT, padx=5)
        start_btn.bind('<Button-1>', lambda e: self.show_start_menu())
        
        # –í—Ä–µ–º—è
        time_label = tk.Label(taskbar, text="GOVNO OS", font=('Segoe UI', 9), 
                            bg='#2d2d2d', fg='white', padx=10)
        time_label.pack(side=tk.RIGHT)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_label = tk.Label(self.root, text="–ù–∞–∂–º–∏—Ç–µ CAPSLOCK –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ GOVNO OS", 
                            font=('Segoe UI', 12), bg='#1a1a1a', fg='#666666')
        hint_label.place(relx=0.5, rely=0.95, anchor=tk.CENTER)
        
    def icon_click(self, icon_name):
        messages = {
            "–ú–æ–π GOVNO": "–û—Ç–∫—Ä—ã–≤–∞—é –≤–∞—à–µ GOVNO...\n–û–π, –∫–∞–∂–µ—Ç—Å—è, –æ–Ω–æ —É–±–µ–∂–∞–ª–æ!",
            "–ö–æ—Ä–∑–∏–Ω–∞": "–ö–æ—Ä–∑–∏–Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ GOVNOM!\n–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞.",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GOVNO OS:\n‚Ä¢ –¶–≤–µ—Ç GOVNA: –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π\n‚Ä¢ –ó–∞–ø–∞—Ö: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é\n‚Ä¢ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏—è: –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è",
            "GOVNO Browser": "–ó–∞–ø—É—Å–∫ GOVNO Browser...\n–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ä–≤–µ—Ä–∞–º...\n–û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ GOVNA!",
            "–ò–≥—Ä—ã": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n‚Ä¢ GOVNO Adventure\n‚Ä¢ PONOS Quest\n‚Ä¢ –£–±–æ—Ä–∫–∞ 2024"
        }
        
        messagebox.showinfo(icon_name, messages.get(icon_name, "–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))
        
    def show_start_menu(self):
        menu = tk.Toplevel(self.root)
        menu.geometry("300x400+50+750")
        menu.configure(bg='#2d2d2d')
        menu.overrideredirect(True)
        menu.attributes('-topmost', True)
        
        apps = [
            "üí© GOVNO Manager",
            "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "üåê GOVNO Browser",
            "üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "üö™ –í—ã—Ö–æ–¥"
        ]
        
        for app in apps:
            btn = tk.Label(menu, text=app, font=('Segoe UI', 11), 
                         bg='#2d2d2d', fg='white', cursor='hand2',
                         anchor='w', padx=20, pady=10)
            btn.pack(fill=tk.X)
            btn.bind('<Button-1>', lambda e, a=app: self.start_menu_click(a, menu))
            btn.bind('<Enter>', lambda e: e.widget.configure(bg='#0078d4'))
            btn.bind('<Leave>', lambda e: e.widget.configure(bg='#2d2d2d'))
            
    def start_menu_click(self, app, menu):
        menu.destroy()
        if app == "üö™ –í—ã—Ö–æ–¥":
            self.exit_govno_os()
        else:
            messagebox.showinfo(app, f"–ó–∞–ø—É—Å–∫ {app}...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!\n–°–∏—Å—Ç–µ–º–∞ GOVNO –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.")
            
    def exit_govno_os(self):
        self.root.destroy()

class Windows11Explorer:
    def __init__(self, root):
        self.root = root
        self.root.title("–ü—Ä–æ–≤–æ–¥–Ω–∏–∫")
        self.root.geometry("1200x800")
        self.root.configure(bg='#fafafa')
        self.root.minsize(800, 600)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            self.root.iconbitmap(default='explorer.ico')
        except:
            pass
            
        self.current_path = "GOVNO_DISK:"
        self.create_modern_ui()
        
    def create_modern_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg='#fafafa')
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # === –í–ï–†–•–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ –° –ö–ù–û–ü–ö–ê–ú–ò ===
        title_bar = tk.Frame(main_container, bg='#fafafa', height=40)
        title_bar.pack(fill=tk.X, padx=10, pady=(10, 5))
        title_bar.pack_propagate(False)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_frame = tk.Frame(title_bar, bg='#fafafa')
        nav_frame.pack(side=tk.LEFT)
        
        back_btn = self.create_modern_button(nav_frame, "‚Üê", self.go_back)
        back_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        forward_btn = self.create_modern_button(nav_frame, "‚Üí", self.go_forward)
        forward_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        up_btn = self.create_modern_button(nav_frame, "‚Üë", self.go_up)
        up_btn.pack(side=tk.LEFT, padx=(0, 15))
        
        # –ê–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        address_frame = tk.Frame(title_bar, bg='#e5e5e5', relief='flat', bd=1)
        address_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=10)
        
        self.address_var = tk.StringVar(value="GOVNO_DISK:")
        address_entry = tk.Entry(address_frame, textvariable=self.address_var, 
                               font=('Segoe UI', 10), bg='white', relief='flat',
                               borderwidth=0, highlightthickness=0)
        address_entry.pack(fill=tk.X, expand=True, padx=5, pady=3)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_btn = self.create_modern_button(title_bar, "üîç –ü–æ–∏—Å–∫", self.search)
        search_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞
        view_btn = self.create_modern_button(title_bar, "‚â° –í–∏–¥", self.change_view)
        view_btn.pack(side=tk.RIGHT, padx=5)
        
        # === –ü–ê–ù–ï–õ–¨ –ë–´–°–¢–†–û–ì–û –î–û–°–¢–£–ü–ê ===
        quick_access_frame = tk.Frame(main_container, bg='#fafafa', height=60)
        quick_access_frame.pack(fill=tk.X, padx=10, pady=5)
        quick_access_frame.pack_propagate(False)
        
        quick_items = ["üìÅ GOVNO", "üìÅ PONOS", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "üì• –ó–∞–≥—Ä—É–∑–∫–∏", "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
        for item in quick_items:
            btn = self.create_modern_button(quick_access_frame, item, 
                                          lambda x=item: self.quick_access_click(x),
                                          small=True)
            btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # === –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ ===
        content_frame = tk.Frame(main_container, bg='white')
        content_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ –¥–≤–µ –ø–∞–Ω–µ–ª–∏
        paned_window = ttk.PanedWindow(content_frame, orient=tk.HORIZONTAL)
        paned_window.pack(fill=tk.BOTH, expand=True)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        left_panel = tk.Frame(paned_window, bg='#f8f8f8')
        paned_window.add(left_panel, weight=1)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        right_panel = tk.Frame(paned_window, bg='white')
        paned_window.add(right_panel, weight=3)
        
        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –î–ï–†–ï–í–û –ü–ê–ü–û–ö ===
        tk.Label(left_panel, text="–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø", font=('Segoe UI', 9, 'bold'), 
                bg='#f8f8f8', anchor='w').pack(fill=tk.X, padx=15, pady=(15, 5))
        
        left_nav_items = [
            "üìÅ GOVNO",
            "üìÅ PONOS", 
            "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –≥–æ–≤–Ω–æ",
            "üîÑ –ù–µ–¥–∞–≤–Ω–∏–µ",
            "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞"
        ]
        
        for item in left_nav_items:
            btn = tk.Label(left_panel, text=item, font=('Segoe UI', 9), 
                          bg='#f8f8f8', fg='#333333', cursor='hand2',
                          anchor='w', padx=15, pady=8)
            btn.pack(fill=tk.X)
            btn.bind('<Button-1>', lambda e, x=item: self.nav_item_click(x))
            btn.bind('<Enter>', lambda e: e.widget.configure(bg='#e5f3ff'))
            btn.bind('<Leave>', lambda e: e.widget.configure(bg='#f8f8f8'))
        
        tk.Frame(left_panel, height=1, bg='#e0e0e0').pack(fill=tk.X, padx=10, pady=10)
        
        tk.Label(left_panel, text="–≠—Ç–æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä", font=('Segoe UI', 9, 'bold'), 
                bg='#f8f8f8', anchor='w').pack(fill=tk.X, padx=15, pady=(5, 5))
        
        pc_items = [
            "üñ¥ GOVNO_DISK (G:)",
            "üíø –î–∏—Å–∫ D:",
            "üì∏ –î–∏—Å–∫ E:"
        ]
        
        for item in pc_items:
            btn = tk.Label(left_panel, text=item, font=('Segoe UI', 9), 
                          bg='#f8f8f8', fg='#333333', cursor='hand2',
                          anchor='w', padx=15, pady=6)
            btn.pack(fill=tk.X)
            btn.bind('<Button-1>', lambda e, x=item: self.drive_click(x))
        
        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–û–î–ï–†–ñ–ò–ú–û–ï ===
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
        right_toolbar = tk.Frame(right_panel, bg='#fafafa', height=40)
        right_toolbar.pack(fill=tk.X)
        right_toolbar.pack_propagate(False)
        
        tk.Label(right_toolbar, text="GOVNO_DISK (G:)", font=('Segoe UI', 12, 'bold'), 
                bg='#fafafa').pack(side=tk.LEFT, padx=15, pady=10)
        
        # –û–±–ª–∞—Å—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏
        self.file_frame = tk.Frame(right_panel, bg='white')
        self.file_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        self.create_file_grid()
        
        # === –°–¢–†–û–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø ===
        status_bar = tk.Frame(main_container, bg='#e5e5e5', height=24)
        status_bar.pack(fill=tk.X, padx=10, pady=(5, 10))
        status_bar.pack_propagate(False)
        
        tk.Label(status_bar, text="2 —ç–ª–µ–º–µ–Ω—Ç–∞", font=('Segoe UI', 9), 
                bg='#e5e5e5').pack(side=tk.LEFT, padx=10)
        
        tk.Label(status_bar, text="GOVNODAL 2.0 | –ó–∞—â–∏—â—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", 
                font=('Segoe UI', 9), bg='#e5e5e5').pack(side=tk.RIGHT, padx=10)
        
    def create_modern_button(self, parent, text, command, small=False):
        if small:
            btn = tk.Label(parent, text=text, font=('Segoe UI', 9), 
                          bg='#e8e8e8', fg='#333333', cursor='hand2',
                          padx=12, pady=6, relief='flat', bd=0)
        else:
            btn = tk.Label(parent, text=text, font=('Segoe UI', 10), 
                          bg='#e8e8e8', fg='#333333', cursor='hand2',
                          padx=15, pady=8, relief='flat', bd=0)
        
        btn.bind('<Button-1>', lambda e: command())
        btn.bind('<Enter>', lambda e: e.widget.configure(bg='#d5d5d5'))
        btn.bind('<Leave>', lambda e: e.widget.configure(bg='#e8e8e8'))
        return btn
        
    def create_file_grid(self):
        # –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Ñ–∞–π–ª–æ–≤
        for widget in self.file_frame.winfo_children():
            widget.destroy()
            
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Ñ–∞–π–ª–æ–≤
        files = [
            ("üìÅ", "GOVNO", "–ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏", "–°–µ–≥–æ–¥–Ω—è"),
            ("üìÅ", "PONOS", "–°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–ø–∫–∞", "–í—á–µ—Ä–∞"),
            ("üìÑ", "govno.govno", "–§–∞–π–ª GOVNO", "15.12.2023"),
            ("üîß", "system.dll", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "10.12.2023"),
            ("üìä", "data.bin", "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö", "08.12.2023")
        ]
        
        for i, (icon, name, desc, date) in enumerate(files):
            file_frame = tk.Frame(self.file_frame, bg='white', cursor='hand2')
            file_frame.grid(row=i//4, column=i%4, padx=15, pady=15, sticky='nw')
            
            # –ò–∫–æ–Ω–∫–∞ —Ñ–∞–π–ª–∞
            icon_label = tk.Label(file_frame, text=icon, font=('Segoe UI', 24), 
                                 bg='white', cursor='hand2')
            icon_label.pack(pady=(5, 2))
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            name_label = tk.Label(file_frame, text=name, font=('Segoe UI', 9), 
                                 bg='white', cursor='hand2', wraplength=120, justify='center')
            name_label.pack(pady=2)
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_label = tk.Label(file_frame, text=desc, font=('Segoe UI', 8), 
                                 bg='white', fg='#666666', cursor='hand2')
            desc_label.pack(pady=2)
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            for widget in [file_frame, icon_label, name_label, desc_label]:
                widget.bind('<Double-Button-1>', lambda e, n=name: self.file_double_click(n))
                widget.bind('<Enter>', lambda e: e.widget.master.configure(bg='#f0f8ff') 
                           if hasattr(e.widget, 'master') else None)
                widget.bind('<Leave>', lambda e: e.widget.master.configure(bg='white') 
                           if hasattr(e.widget, 'master') else None)
    
    def file_double_click(self, filename):
        if filename in ["GOVNO", "PONOS"]:
            messagebox.showinfo("GOVNODAL 2.0", 
                              f"–î–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ '{filename}' –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n"
                              f"–°–∏—Å—Ç–µ–º–∞ GOVNODAL –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!\n"
                              f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∫–∏–Ω—É—Ç—å –∫–æ–º–ø –≤ –æ–∫–Ω–æ.")
        else:
            messagebox.showwarning("–û—à–∏–±–∫–∞", 
                                 f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å '{filename}'\n\n"
                                 f"–ì–û–í–ù–û –í–ê–° –°–í–Ø–ó–ê–õ–û.\n"
                                 f"–ú–û–ñ–ò–¢–ï –û–ë–û–°–†–ê–¢–¨–°–Ø.")
    
    def nav_item_click(self, item):
        if item in ["üìÅ GOVNO", "üìÅ PONOS"]:
            messagebox.showinfo("–ù–∞–≤–∏–≥–∞—Ü–∏—è", f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ {item}")
        else:
            messagebox.showinfo("GOVNODAL", f"–§—É–Ω–∫—Ü–∏—è '{item}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –•–æ—Ç—å –æ–±–æ—Å—Ä–∏—Å—å")
    
    def drive_click(self, drive):
        if "GOVNO_DISK" in drive:
            messagebox.showinfo("–î–∏—Å–∫ G:", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ GOVNO_DISK")
        else:
            messagebox.showwarning("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞", 
                                 f"–î–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                                 f"–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GOVNO_DISK")
    
    def quick_access_click(self, item):
        self.file_double_click(item.replace("üìÅ ", ""))
    
    def go_back(self):
        messagebox.showinfo("–ù–∞–≤–∏–≥–∞—Ü–∏—è", "–ù–∞–∑–∞–¥ –ø—É—Ç–∏ –Ω–µ—Ç!\n–¢–æ–ª—å–∫–æ –≤ —Ç—É–∞–ª–µ—Ç!")
    
    def go_forward(self):
        messagebox.showinfo("–ù–∞–≤–∏–≥–∞—Ü–∏—è", "–í–ø–µ—Ä—ë–¥ –Ω–µ–ª—å–∑—è!\n–°–∏—Å—Ç–µ–º–∞ GOVNODAL –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é!")
    
    def go_up(self):
        messagebox.showinfo("–ù–∞–≤–∏–≥–∞—Ü–∏—è", "–í—ã —É–∂–µ –≤ –∂–æ–ø–µ!")
    
    def search(self):
        messagebox.showinfo("–ü–æ–∏—Å–∫", 
                          "–ü–æ–∏—Å–∫ –ø–æ GOVNO_DISK...\n\n"
                          "–ù–∞–π–¥–µ–Ω–æ:\n"
                          "‚Ä¢ 2 –ø–∞–ø–∫–∏: GOVNO, PONOS\n"
                          "‚Ä¢ 3 —Ñ–∞–π–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n\n"
                          "–í—Å–µ —Ñ–∞–π–ª—ã –∑–∞—â–∏—â–µ–Ω—ã —Å–∏—Å—Ç–µ–º–æ–π GOVNODAL 2.0")
    
    def change_view(self):
        messagebox.showinfo("–í–∏–¥", 
                          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
                          "‚Ä¢ –ö—Ä—É–ø–Ω—ã–µ –∑–Ω–∞—á–∫–∏ ‚úì\n"
                          "‚Ä¢ –û–±—ã—á–Ω—ã–µ –∑–Ω–∞—á–∫–∏\n"
                          "‚Ä¢ –°–ø–∏—Å–æ–∫\n"
                          "‚Ä¢ –¢–∞–±–ª–∏—Ü–∞\n\n"
                          "–°–∏—Å—Ç–µ–º–∞ GOVNODAL —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–∏–¥")

def create_shortcut():
    """–°–æ–∑–¥–∞–µ—Ç —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ"""
    try:
        desktop = winshell.desktop()
        shortcut_path = os.path.join(desktop, "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫.lnk")
        
        target = sys.executable
        wDir = os.path.dirname(sys.executable)
        
        shell = Dispatch('WScript.Shell')
        shortcut = shell.CreateShortCut(shortcut_path)
        shortcut.Targetpath = target
        shortcut.Arguments = f'"{os.path.abspath(__file__)}"'
        shortcut.WorkingDirectory = wDir
        shortcut.IconLocation = "shell32.dll,0"
        shortcut.save()
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—Ä–ª—ã–∫–∞: {e}")
        return False

def show_welcome():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    messagebox.showinfo("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GOVNODAL 2.0", 
                       "–í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ GOVNODAL 2.0!\n\n"
                       "‚Ä¢ GOVNO_DISK - –Ω–æ–≤—ã–π –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –¥–∏—Å–∫\n"
                       "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö\n"
                       "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏\n\n"
                       "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–æ–≤–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π!")

def show_installation_prompt():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ GOVNO OS"""
    result = messagebox.askyesno(
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GOVNO OS 2.0!\n\n"
        "–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–∞—à–µ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?\n\n"
        "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n" 
        "‚Ä¢ –ù–æ–≤–∞—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ GOVNO_FS\n"
        "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å!",
        icon='warning'
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –í–ù–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –æ—Ç –æ—Ç–≤–µ—Ç–∞
    root = tk.Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
    installer_root = tk.Tk()
    installer = GOVNOOSInstaller(installer_root)
    installer_root.mainloop()

def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    if hasattr(ctypes, 'windll'):
        ctypes.windll.shcore.SetProcessDpiAwareness(1)
    
    # –°–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    desktop = winshell.desktop()
    shortcut_path = os.path.join(desktop, "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫.lnk")
    
    if not os.path.exists(shortcut_path):
        if create_shortcut():
            print("–Ø—Ä–ª—ã–∫ '–ü—Ä–æ–≤–æ–¥–Ω–∏–∫' —Å–æ–∑–¥–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞
    show_welcome()
    
    # –ó–ê–ü–£–°–ö–ê–ï–ú –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–£–Æ –£–°–¢–ê–ù–û–í–ö–£ GOVNO OS
    show_installation_prompt()
    
    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∏–ª–∏ –µ–µ –æ—Ç–º–µ–Ω—ã) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
    root = tk.Tk()
    app = Windows11Explorer(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()